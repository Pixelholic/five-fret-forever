export declare interface Bpm extends TickEvent {
    type: "bpm";
    bpm: number;
}

export declare type ChartTrack = `${Difficulty}${Instrument}`;

declare const difficulties: readonly ["Easy", "Medium", "Hard", "Expert"];

export declare type Difficulty = (typeof difficulties)[number];

export declare type Instrument = (typeof instruments)[number];

declare const instruments: readonly ["Single", "DoubleBass", "DoubleRhythm", "Keyboard", "DoubleGuitar", "Vocals"];

export declare interface NoteEvent extends TickEvent {
    type: "note";
    note: number;
    isHOPO: boolean;
    isChord: boolean;
    forced: boolean;
    tap: boolean;
    duration: number;
}

export declare function parseChart(input: string | ArrayBufferLike): {
    chart: ParsedChart;
    warnings: string[];
};

export declare type ParsedChart = {
    Song: SongSection;
    SyncTrack: TimedTracks<SyncTrack>;
    Events?: Timed<SimpleEvent>[];
} & {
    [instrument in ChartTrack]?: Timed<PlayEvent>[];
};

export declare type PlayEvent = NoteEvent | SimpleEvent | StarPowerEvent;

export declare interface SimpleEvent extends TickEvent {
    type: "event";
    value: string;
}

export declare interface SongSection {
    resolution: number;
    name?: string;
    artist?: string;
    album?: string;
    charter?: string;
    player2?: string;
    genre?: string;
    mediaType?: string;
    year?: string;
    offset?: number;
    difficulty?: number;
    previewstart?: number;
    previewend?: number;
}

export declare interface StarPowerEvent extends TickEvent {
    type: "starpower";
    duration: number;
}

export declare interface SyncTrack {
    bpms: Bpm[];
    timeSignatures: TimeSignature[];
    allEvents: SyncTrackEvent[];
}

export declare type SyncTrackEvent = Bpm | TimeSignature;

export declare interface TickEvent {
    tick: number;
}

export declare function tickToTime(tick: number, resolution: number, bpms: Timed<Bpm>[]): number;

export declare type Timed<T> = T & {
    assignedTime: number;
};

export declare type TimedTrack<T> = T extends Array<any> ? Timed<T[number]>[] : Timed<T>;

export declare type TimedTracks<T> = {
    [P in keyof T]: TimedTrack<T[P]>;
};

export declare interface TimeSignature extends TickEvent {
    type: "ts";
    numerator: number;
    denominator: number;
}

export declare function timeToTick(time: number, resolution: number, bpms: Timed<Bpm>[]): number;

export { }
